package utils;

import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;

/**
 * A generic class that represents a node in a tree structure. Nodes can have
 * a parent and multiple children, enabling the construction of hierarchical
 * relationships.
 *
 * @param <T> the type of the node
 */
public class Node<T> extends Rectangle2D.Double {
    /**
     * A static variable that serves as a global index counter for instances of the
     * Node class. This variable is incremented with each instantiation of a Node,
     * providing a unique identifier for each node within the tree structure.
     */
    private static long index = 0;

    /**
     * A unique identifier for each instance of the Node class. This identifier is
     * initialized using a static index that increments with each new Node instance,
     * ensuring that every node within the tree structure has a distinct id.
     */
    protected long id = index++;
    /**
     * Holds the unique name identifier for each node instance within the tree structure.
     * This identifier is generated by concatenating the string "node_" with a unique
     * node-specific id. It provides a human-readable representation for nodes that
     * can be used for display or logging purposes within the application.
     */
    protected String name = "node_" + (id);

    /**
     * Represents the parent node of the current node in a tree structure. This variable allows for
     * hierarchical relationships between nodes, enabling navigation and traversal of the tree
     * from child nodes back to their parent nodes.
     * <p>
     * The parent node is initially set to null, indicating that the current node is the root
     * or has not yet been added to a tree structure. Once the node is attached to a parent,
     * this variable is updated to reference the respective parent node, facilitating tree
     * traversal mechanisms.
     */
    private Node<?> parent = null;
    /**
     * Represents the child nodes of the current node within a tree structure.
     * This list allows for the representation of hierarchical relationships,
     * enabling the node to have multiple descendants. Each element in the list
     * is a Node of potentially any type, facilitating flexibility in tree
     * construction and traversal. The list is initialized as an empty ArrayList
     * and can be populated with additional child nodes using methods provided
     * by the Node class.
     */
    private List<Node<?>> children = new ArrayList<>();

    /**
     * Constructs an instance of the Node class.
     * This private constructor is used internally within the class to
     * initialize a Node object without any specific parameters.
     */
    private Node() {
    }

    /**
     * Constructs a Node with the specified name.
     *
     * @param name the name to assign to this Node
     */
    public Node(String name) {
        this.name = name;
    }

    /**
     * Sets the name for this Node instance and returns the current object.
     *
     * @param name the new name to set for this Node
     * @return the current instance of the Node with the updated name
     */
    private T setName(String name) {
        this.name = name;
        return (T) this;
    }

    /**
     * Retrieves the unique identifier of this Node.
     *
     * @return the unique identifier of the node as a Long.
     */
    public Long getId() {
        return Long.valueOf(this.id);
    }

    /**
     * Retrieves the name of this Node instance.
     *
     * @return the name of the Node.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the parent Node for this instance and returns the current instance.
     *
     * @param p the Node to be set as the parent for this instance
     * @return the current instance with the updated parent Node
     */
    public T setParent(Node<?> p) {
        this.parent = p;
        return (T) this;
    }

    /**
     * Adds a child node to this node, setting this node as the parent of the child.
     *
     * @param c the child node to be added
     */
    public void add(Node<?> c) {
        c.parent = this;
        this.children.add(c);
    }

    /**
     * Retrieves the list of child nodes associated with this node.
     *
     * @return a list of Node objects representing the children of this node.
     */
    public List<Node<?>> getChildren() {
        return children;
    }
}
